from /love use love
use /gfx
use /sfx
use /res/
use guy
from guy use (Faction, faction_to_int)
use game

//Camera :: blob {
//
//}
factionColors :: [
    gfx.rgb(0.384, 0.196, 0.663),
    gfx.rgb(0.800, 0.594, 0.275),
    gfx.rgb(0.467, 0.729, 0.275),
    gfx.rgb(0.820, 0.230, 0.000),
]

factionColor :: fn faction ->
    factionColors[guy.faction_to_int(faction)]
end

shaderColor :: fn node -> int
    case node.tile do
        Base faction ret guy.faction_to_int(faction)
        Captured faction ret guy.faction_to_int(faction)
        Factory faction ret guy.faction_to_int(faction)
        Empty ret 4
        EmptyFactory ret 4
        else do <!> end
    end
    ret 4
end

tileColor :: fn tile ->
    case tile do
        Base faction ret factionColor(faction)
        Captured faction ret factionColor(faction)
        Empty ret gfx.rgb' 0.5, 0.5, 0.5
        EmptyFactory ret gfx.rgb' 0.9, 0.9, 0.9
        Factory faction ret factionColor(faction)
        else do <!> end
    end

    ret gfx.rgb' 0., 0., 0.
end

drawNode :: fn node: Node, state do

    c :: gfx.rgba' 1., 1. 1. 0.2
    s :: 0.7
    res.img["blurr"].drawTintedCentered' c, node.position, 0.0, (s, s)
    case node.tile do
        Base faction do
            guy.crest_image(faction).drawCentered' node.position, 0.0, (1., 1.)
        end
        Captured faction do
            c :: tileColor(node.tile)
            gfx.drawCircle' c, node.position, NODE_SIZE
        end
        Factory faction do
            c :: tileColor(node.tile)
            gfx.drawCircle' c, node.position, NODE_SIZE
            res.img["tile_fact"].drawCentered' node.position, 0.0, (.5, .5)
        end
        Empty do
            c :: tileColor(node.tile)
            gfx.drawCircle' c, node.position, NODE_SIZE
        end
        EmptyFactory do
            c :: tileColor(node.tile)
            gfx.drawCircle' c, node.position, NODE_SIZE
            res.img["tile_fact"].drawCentered' node.position, 0.0, (.5, .5)
        end
        else do <!> end
    end

    if node == state.graph.nodes[game.guy_to_move(state).node] do
        c :: gfx.rgba' 1., 1. 1. 0.5
        gfx.drawCircle' c, node.position, NODE_SIZE
    end
end

drawGraph :: fn graph: Graph, state do
    graph.edges -> for_each' fn edge do
        n1 := graph.nodes[edge[0]]
        n2 := graph.nodes[edge[1]]

        c := gfx.rgba' 1., 1., 1., 0.3
        gfx.drawLinew' c, 2., n1.position, n2.position
    end

    graph.nodes -> for_each' fn node do
        drawNode' node, state
    end
end

scoreGraph :: fn graph: Graph -> (int, int, int, int)
    score :: [0, 0, 0, 0]
    f :: fn node do
        case node.tile do
            Base faction do
                score[faction_to_int(faction)] += 1
            end
            Factory faction do
                score[faction_to_int(faction)] += 1
            end
            Captured faction do
                score[faction_to_int(faction)] += 1
            end
            Empty do end
            EmptyFactory do end
            else do
                print' "Remember to add score for the new tile variant!"
                <!>
            end
        end
    end
    graph.nodes -> for_each' f
    (score[0], score[1], score[2], score[3])
end

graphScale :: fn graph: Graph ->
    if len(graph.nodes) == 36 do
        ret 0.6
    end

    1.0
end

graphCenter :: fn graph: Graph ->
    centerPosition := (0., 0.)
    graph.nodes -> for_each' fn node do
        centerPosition += node.position
    end

    n :: as_float' len' graph.nodes
    halfWidth :: gfx.screenSizef() * (0.5, 0.5)
    centerPosition = (centerPosition / (n, n)) - halfWidth
    ret (-centerPosition[0], -centerPosition[1])
end

force_function :: fn distance ->
    t :: (NODE_SIZE * 5.0 - distance) * 2.0
    t
end

updateGraph :: fn graph: Graph, delta do
    graph.edges -> for_each' fn edge do
        diff :: graph.nodes[edge[0]].position - graph.nodes[edge[1]].position
        mag  :: force_function' magnitude' diff
        force :: normalize(diff) * (mag, mag)

        graph.nodes[edge[0]].velocity += force
        graph.nodes[edge[1]].velocity -= force
    end

    graph.nodes -> for_each' fn node do
        screen_center :: gfx.screenSizef() * (0.5, 0.5)
        node.velocity += (screen_center - node.position) * (delta, delta)

        if node.is_pinned do
            f :: 2.0
            node.velocity += (node.pinned - node.position) * (f, f)
        end

        force :: 400.
        graph.nodes -> for_each' fn other do
            diff :: node.position - other.position
            mag :: magnitude_squared' diff
            if mag > 0.1 do
                node.velocity += (force, force) * diff * (10.0, 10.0) / (mag, mag)
            end
        end

        node.position += node.velocity * (delta, delta)

        damping :: 0.8
        node.velocity *= (damping, damping)
    end
end

Graph :: blob {
    nodes: [Node],
    edges: [(int, int)],
}

Node :: blob {
    position: (float, float),
    velocity: (float, float),
    tile: Tile,
    is_pinned: bool,
    pinned: (float, float),
}

new_node :: fn tile, position ->
    width :: love.graphics.getWidth'
    height :: love.graphics.getHeight'
    offset :: (sfx.random(-100., 100.), sfx.random(-100., 100.))

    Node {
        position: position + offset,
        velocity: offset * (20., 20.),
        tile: tile,
        is_pinned: false,
        pinned: position,
    }
end

new_node_pin :: fn tile, position ->
    width :: love.graphics.getWidth'
    height :: love.graphics.getHeight'
    offset :: (sfx.random(-100., 100.), sfx.random(-100., 100.))

    Node {
        position: position + offset,
        velocity: offset * (20., 20.),
        tile: tile,
        is_pinned: true,
        pinned: position,
    }
end

NODE_SIZE :: 30.

Tile :: enum
    Base Faction,
    Captured Faction,
    Factory Faction,
    Empty,
    EmptyFactory,
end

neighboursOf :: fn node: int, graph -> [int] do
    neighbours: [int] = []
    graph.edges -> for_each' fn edge do
        if node == edge[0] do
            push' neighbours, edge[1]
        end else if node == edge[1] do
            push' neighbours, edge[0]
        end
    end

    neighbours
end

facingNeighbour :: fn node: int, count_guys: fn *, * -> int, faction, direction: (float, float), graph -> int do
    nDirection := normalize' direction
    origo := graph.nodes[node].position
    neighbours := neighboursOf' node, graph
    best := -1
    bestScalar := -2.
    neighbours -> for_each' fn neighbour do
        case graph.nodes[neighbour].tile do
            Base f do
                if guy.faction_to_int(f) != guy.faction_to_int(faction) do
                    ret
                else do
                end
            end
            else do end
        end

        if count_guys(neighbour, faction) > 1 ret

        nNeighbour := normalize(graph.nodes[neighbour].position - origo)
        cosPhi := dot' nDirection, nNeighbour

        if cosPhi > bestScalar do
            best = neighbour
            bestScalar = cosPhi
        end
    end

    ret best
end

createGraph :: fn -> Graph do
    Graph {
        nodes: [
            new_node(Tile.Empty, (160., 200.)),
            new_node(Tile.Empty, (240., 200.)),
            new_node(Tile.Empty, (320., 200.)),
            new_node(Tile.Empty, (400., 200.)),
            new_node(Tile.Empty, (480., 200.)),
            new_node(Tile.Empty, (560., 200.)),
            new_node(Tile.Empty, (640., 200.)),

            new_node(Tile.Base Faction.Blueberry, (160., 300.)),
            new_node(Tile.Base Faction.Gooseberry, (240., 300.)),
            new_node(Tile.Empty, (320., 300.)),
            new_node(Tile.Empty, (400., 300.)),
            new_node(Tile.Empty, (480., 300.)),
            new_node(Tile.Empty, (560., 300.)),
            new_node(Tile.Base Faction.Cloudberry, (640., 300.)),

            new_node(Tile.Base Faction.Strawberry, (160., 400.)),
            new_node(Tile.Empty, (240., 400.)),
            new_node(Tile.Empty, (320., 400.)),
            new_node(Tile.Empty, (400., 400.)),
            new_node(Tile.Empty, (480., 400.)),
            new_node(Tile.Empty, (560., 400.)),
            new_node(Tile.Empty, (640., 400.)),

            new_node(Tile.Empty, (400., 500.)),
        ],
        edges: [
            (0, 1),
            (1, 2),
            (2, 3),
            (3, 4),
            // (4, 5),
            (5, 6),

            (0, 7),
            (1, 9),
            // (3, 10),
            (5, 11),
            (6, 13),

            (7, 8),
            (8, 9),
            (9, 10),
            (10, 11),
            (11, 12),
            (12, 13),

            (7, 14),
            (8, 15),
            (10, 17),
            (12, 19),
            (13, 20),

            (14, 15),
            (15, 16),
            (16, 17),
            (17, 18),
            (18, 19),
            (19, 20),

            (16, 21),
            (18, 21),
        ],
    }
end

createTwoPlayer :: fn -> Graph do
    Graph {
        nodes: [
            new_node(Tile.Empty, (160., 200.)),
            new_node(Tile.Empty, (240., 200.)),
            new_node(Tile.Empty, (320., 200.)),
            new_node(Tile.Empty, (400., 200.)),
            new_node(Tile.Empty, (480., 200.)),
            new_node(Tile.Empty, (560., 200.)),
            new_node(Tile.Empty, (640., 200.)),

            new_node(Tile.Base Faction.Blueberry, (160., 300.)),
            new_node(Tile.Empty, (240., 300.)),
            new_node(Tile.Empty, (320., 300.)),
            new_node(Tile.Empty, (400., 300.)),
            new_node(Tile.Empty, (480., 300.)),
            new_node(Tile.Empty, (560., 300.)),
            new_node(Tile.Base Faction.Cloudberry, (640., 300.)),

            new_node(Tile.Empty, (160., 400.)),
            new_node(Tile.Empty, (240., 400.)),
            new_node(Tile.Empty, (320., 400.)),
            new_node(Tile.Empty, (400., 400.)),
            new_node(Tile.Empty, (480., 400.)),
            new_node(Tile.Empty, (560., 400.)),
            new_node(Tile.Empty, (640., 400.)),

            new_node(Tile.EmptyFactory, (400., 500.)),
        ],
        edges: [
            (0, 1),
            (1, 2),
            (2, 3),
            (3, 4),
            (4, 5),
            (5, 6),

            (0, 7),
            (1, 9),
            (3, 10),
            (5, 11),
            (6, 13),

            (7, 8),
            (8, 9),
            (9, 10),
            (10, 11),
            (11, 12),
            (12, 13),

            (7, 14),
            (8, 15),
            (10, 17),
            (12, 19),
            (13, 20),

            (14, 15),
            (15, 16),
            (16, 17),
            (17, 18),
            (18, 19),
            (19, 20),

            (16, 21),
            (18, 21),
        ],
    }
end

createThreePlayerGraph :: fn -> Graph do
    s :: 2.0
    Graph {
        nodes: [
           new_node(Tile.Base Faction.Blueberry, (0., 300.)),
           new_node(Tile.Empty, (-300., 200.)),
           new_node_pin(Tile.EmptyFactory, (-200. * s, 200. * s)),
           new_node(Tile.Empty, (0., 200.)),
           new_node_pin(Tile.EmptyFactory, (200. * s, 200. * s)),
           new_node(Tile.Empty, (300., 200.)),
           new_node(Tile.Empty, (-100., 100.)),

           new_node_pin(Tile.EmptyFactory, (0., 0.)),
           new_node(Tile.Empty, (100., 100.)),
           new_node(Tile.Empty, (-200., -100.)),
           new_node(Tile.Empty, (0., -100.)),
           new_node(Tile.Empty, (200., -100.)),
           new_node(Tile.Base Faction.Gooseberry, (-300., -200.)),
           new_node_pin(Tile.EmptyFactory, (0. * s, -200. * s)),

           new_node(Tile.Base Faction.Cloudberry, (300., -200.)),
           new_node(Tile.Empty, (0., -300.)),
        ],
        edges: [
            (0, 2),
            (0, 3),
            (0, 4),
            (1, 2),
            (2, 3),
            (2, 6),
            (2, 9),

            (2, 12),
            (3, 6),
            (3, 8),
            (3, 4),
            (3, 7),
            (4, 11),
            (4, 5),
            (4, 8),

            (4, 14),
            (6, 9),
            (6, 7),
            (7, 8),
            (7, 9),
            (7, 10),
            (7, 11),
            (8, 11),
            (9, 10),

            (9, 12),
            (9, 13),
            (10, 11),
            (10, 13),
            (11, 13),
            (11, 14),
            (12, 13),

            (13, 15),
            (13, 14),
       ],
    }
end

createFourPlayerGraph :: fn -> Graph do
    Graph {
        nodes: [
            new_node(Tile.Empty, (50., 0.)),
            new_node(Tile.Empty, (-50., 0.)),
            new_node(Tile.Empty, (-40., 0.)),
            new_node(Tile.Empty, (-40., 20.)),
            new_node(Tile.Empty, (-40., -20.)),

            new_node(Tile.Base Faction.Blueberry, (-30., 30.)),
            new_node(Tile.Empty, (-30., 10.)),
            new_node(Tile.Empty, (-30., -10.)),
            new_node(Tile.Base Faction.Strawberry, (-30., -30.)),
            new_node(Tile.Empty, (-20., -40.)),

            new_node(Tile.Empty, (-20., 40.)),
            new_node(Tile.Empty, (-10., 30.)),
            new_node(Tile.Empty, (-20., 20.)),
            new_node(Tile.Empty, (-20., -20.)),
            new_node(Tile.Empty, (-10., -30.)),

            new_node(Tile.Empty, (0., -40.)),
            new_node(Tile.Empty, (0., -50.)),
            new_node(Tile.Empty, (0., 50.)),
            new_node(Tile.Empty, (0., 40.)),
            new_node(Tile.Empty, (10., 30.)),

            new_node(Tile.Empty, (20., 20.)),
            new_node(Tile.EmptyFactory, (0., 10.)),
            new_node(Tile.Empty, (-10., 0.)),
            new_node(Tile.Empty, (10., 0.)),
            new_node(Tile.EmptyFactory, (0., -10.)),

            new_node(Tile.Empty, (20., 40.)),
            new_node(Tile.Base Faction.Gooseberry, (30., 30.)),
            new_node(Tile.Empty, (30., 10.)),
            new_node(Tile.Empty, (30., -10.)),
            new_node(Tile.Empty, (20., -20.)),

            new_node(Tile.Empty, (10., -30.)),
            new_node(Tile.Empty, (20., -40.)),
            new_node(Tile.Base Faction.Cloudberry, (30., -30.)),
            new_node(Tile.Empty, (40., -20.)),
            new_node(Tile.Empty, (40., 0.)),

            new_node(Tile.Empty, (40., 20.)),

        ],
        edges: [
            (0, 34),
            (1, 2),
            (2, 3),
            (2, 4),
            (2, 6),

            (2, 7),
            (3, 5),
            (3, 6),
            (4, 7),
            (4, 8),

            (5, 10),
            (5, 11),
            (5, 6),
            (6, 7),
            (6, 12),

            (7, 8),
            (7, 13),
            (8, 9),
            (8, 14),
            (9, 14),

            (9, 15),
            (10, 18),
            (10, 11),
            (11, 12),
            (11, 18),

            (11, 19),
            (12, 20),
            (12, 21),
            (12, 22),
            (12, 13),

            (13, 22),
            (13, 24),
            (13, 29),
            (13, 14),
            (14, 30),

            (14, 15),
            (15, 16),
            (15, 30),
            (15, 31),
            (17, 18),

            (18, 25),
            (18, 19),
            (19, 25),
            (19, 26),
            (19, 20),

            (20, 21),
            (20, 23),
            (20, 29),
            (20, 27),
            (21, 22),

            (21, 23),
            (22, 24),
            (23, 24),
            (24, 29),
            (23, 29),
            (25, 26),

            (26, 35),
            (26, 27),
            (27, 35),
            (27, 34),
            (27, 28),

            (28, 34),
            (28, 33),
            (28, 32),
            (28, 29),
            (29, 30),

            (30, 31),
            (30, 32),
            (31, 32),
            (32, 33),
            (33, 34),

            (34, 35),
       ],
    }
end

