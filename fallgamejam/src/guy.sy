use /gfx
use graph
use /res/

Faction :: enum
    Blueberry,
    Cloudberry,
    Gooseberry,
    Strawberry,
end

// THIS IS THE SOURCE OF TRUTH
faction_to_int :: fn faction -> int
    case faction do
        Blueberry ret 0
        Cloudberry ret 1
        Gooseberry ret 2
        Strawberry ret 3
        else do end
    end

    ret 0
end

crest_image :: fn faction -> gfx.Image
    case faction do
        Blueberry ret res.img["crest_b"]
        Cloudberry ret res.img["crest_c"]
        Gooseberry ret res.img["crest_g"]
        Strawberry ret res.img["crest_s"]
        else do <!> end
    end

    ret res.img["crest_s"]
end

guy_images :: fn faction -> [gfx.Image]
    get_images :: fn path ->
        ret ["1", "2", "3"] -> map(fn index ->
            res.img[path + "_" + index]
        end)
    end

    case faction do
        Blueberry ret get_images("guy_b")
        Cloudberry ret get_images("guy_c")
        Gooseberry ret get_images("guy_g")
        Strawberry ret get_images("guy_s")
        else do end
    end

    ret get_images("guy_s")
end

Guy :: blob {
    node: int, // node index
    faction: Faction,
    time: float, // For animating
}

new_guy :: fn faction, node ->
    ret Guy {
        node: node,
        faction: faction,
        time: 0.0,
    }
end

updateGuy :: fn guy: Guy, delta: float do
    guy.time += delta
end

ANIMATION_SPEED :: .1
ANIMATION_SEQ :: [0, 1, 2, 1]

drawGuy :: fn guy: Guy, g: graph.Graph do
    images :: guy.faction -> guy_images'
    frame :: rem(as_int(guy.time / ANIMATION_SPEED), len(ANIMATION_SEQ))
    image :: images[ANIMATION_SEQ[frame]]
    tint :: gfx.rgb' 1., 1., 1.
    node :: g.nodes[guy.node]
    pos :: node.position
    image.drawCentered' pos, 0., (1., 1.)
end

drawGuyDirection :: fn guy: Guy, facing_node: int, graph: graph.Graph do
    c := gfx.rgb' 1., 1., 1.
    rot :: angle' graph.nodes[facing_node].position - graph.nodes[guy.node].position
    arrow := res.img["arrow"]
    pos :: graph.nodes[guy.node].position
    arrow.drawCentered' pos, rot, (1., 1.)
end
