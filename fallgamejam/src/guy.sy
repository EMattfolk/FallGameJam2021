use /gfx
use graph
use /res/
from /love use love
use game

Faction :: enum
    Blueberry,
    Cloudberry,
    Gooseberry,
    Strawberry,
end

// THIS IS THE SOURCE OF TRUTH
faction_to_int :: fn faction -> int
    case faction do
        Blueberry ret 0
        Cloudberry ret 1
        Gooseberry ret 2
        Strawberry ret 3
        else do end
    end

    ret 0
end

crest_image :: fn faction -> gfx.Image
    case faction do
        Blueberry ret res.img["crest_b"]
        Cloudberry ret res.img["crest_c"]
        Gooseberry ret res.img["crest_g"]
        Strawberry ret res.img["crest_s"]
        else do <!> end
    end

    ret res.img["crest_s"]
end

guy_images :: fn faction -> [gfx.Image]
    get_images :: fn path ->
        ret ["1", "2", "3"] -> map(fn index ->
            res.img[path + "_" + index]
        end)
    end

    case faction do
        Blueberry ret get_images("guy_b")
        Cloudberry ret get_images("guy_c")
        Gooseberry ret get_images("guy_g")
        Strawberry ret get_images("guy_s")
        else do end
    end

    ret get_images("guy_s")
end

Guy :: blob {
    node: int, // node index
    faction: Faction,
    time: float, // For animating
    active: bool,
}

new_guy :: fn faction, node ->
    ret Guy {
        node: node,
        faction: faction,
        time: 0.0,
        active: true,
    }
end

updateGuy :: fn guy: Guy, delta: float do
    guy.time += delta
    guy.active = true
end

ANIMATION_SPEED :: .1
ANIMATION_SEQ :: [0, 1, 2, 1]

drawGuy :: fn state, guy: Guy, g: graph.Graph do

    frame := rem(as_int(guy.time / ANIMATION_SPEED), len(ANIMATION_SEQ))
    c := gfx.rgb(1., 1., 1.)
    if not guy.active do
        s :: 0.7
        c = gfx.rgb(s, s, s)
        frame = 0
    end

    images :: guy.faction -> guy_images'
    image :: images[ANIMATION_SEQ[frame]]
    tint :: gfx.rgb' 1., 1., 1.
    node :: g.nodes[guy.node]

    pos := node.position
    gs :: game.get_guys_on_node(state, guy.node)
    if len(gs) == 2 do
        if guy == gs[0] do
            pos -= (10., 10.)
        end
        if guy == gs[1] do
            pos += (10., 10.)
        end
    end

    image.drawTintedCentered' c, pos, 0., (1., 1.)

    guy.active = false
end

drawGuyDirection :: fn guy: Guy, facing_node: int, graph: graph.Graph do
    a :: graph.nodes[facing_node].position
    b :: graph.nodes[guy.node].position
    rot :: angle' a - b
    arrow :: res.img["arrow"]
    t :: 0.5 + 0.05 * sin' 4.0 * love.timer.getTime()
    pos :: b + (a - b) * (t, t)
    arrow.drawCentered' pos, rot, (1., 1.)
end
